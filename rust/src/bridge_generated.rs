#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_add_citizen(
    port_: i64,
    name: *mut wire_uint_8_list,
    password: *mut wire_uint_8_list,
    age: i64,
    gender: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_citizen",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            let api_password = password.wire2api();
            let api_age = age.wire2api();
            let api_gender = gender.wire2api();
            move |task_callback| add_citizen(api_name, api_password, api_age, api_gender)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_add_appoinment(port_: i64, citizen_id: i64, center_id: i64, date: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_appoinment",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_citizen_id = citizen_id.wire2api();
            let api_center_id = center_id.wire2api();
            let api_date = date.wire2api();
            move |task_callback| add_appoinment(api_citizen_id, api_center_id, api_date)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_add_vaccination_center(
    port_: i64,
    name: *mut wire_uint_8_list,
    location: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_vaccination_center",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            let api_location = location.wire2api();
            move |task_callback| add_vaccination_center(api_name, api_location)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_get_vax_centers(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_vax_centers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_vax_centers(),
    )
}

#[no_mangle]
pub extern "C" fn wire_add_official(
    port_: i64,
    name: *mut wire_uint_8_list,
    password: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_official",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            let api_password = password.wire2api();
            move |task_callback| add_official(api_name, api_password)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_get_citizen_summary(port_: i64, id: i64, password: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_citizen_summary",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_password = password.wire2api();
            move |task_callback| get_citizen_summary(api_id, api_password)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_get_official_summary(port_: i64, id: i64, password: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_official_summary",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_password = password.wire2api();
            move |task_callback| get_official_summary(api_id, api_password)
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wire enums

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

// Section: impl IntoDart

impl support::IntoDart for CitizenData {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.name.into_dart(),
            self.age.into_dart(),
            self.gender.into_dart(),
            self.sick_no.into_dart(),
            self.tot_citizens.into_dart(),
            self.a_date.into_dart(),
            self.a_name.into_dart(),
            self.a_location.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CitizenData {}

impl support::IntoDart for ID {
    fn into_dart(self) -> support::DartCObject {
        vec![self.id.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ID {}

impl support::IntoDart for OfficialData {
    fn into_dart(self) -> support::DartCObject {
        vec![self.name.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OfficialData {}

// Section: executor
support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
